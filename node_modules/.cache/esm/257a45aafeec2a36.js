let res,models;_fee‍.x([["saveUser",()=>saveUser],["getAllUsers",()=>getAllUsers],["update",()=>update],["deleteById",()=>deleteById]]);_fee‍.w("express/lib/response",[["default",["res"],function(v){res=v}]]);_fee‍.w("../models",[["default",["models"],function(v){models=v}]]);


       const saveUser = async (user) => {
    const model = new models.User({ username: user.username, createAt: new Date() });
    const savedUser = await model.save();
    return savedUser;
};

       const getAllUsers = async () => {
    const User = models.User;
    const users = await User.find();
    return users;
}
       const update = async (user) => {
    const id = user._id;
    const User = models.User;
    let model = await User.findById(id);
    if (model) {
        model.username = user.username;
        model.save();
    }
    return model;
}

       const deleteById = async (id) => {
   // let id = ObjectId.fromString( myObjectIdString );
    const User = models.User;
    _fee‍.g.console.log("service"+id);
    let model = await User.findById(id);
    _fee‍.g.console.log("model",model);
    if (model){
        let result = await User.deleteOne({ _id: id });
        return result;
    }
    return new Error('User not found by the id' + id);

}