let express,models,saveUser,getAllUsers,update,deleteById,validators,handleValidation;_6d5‍.x([["default",()=>_6d5‍.o]]);_6d5‍.w("express",[["default",["express"],function(v){express=v}]]);_6d5‍.w("../models",[["default",["models"],function(v){models=v}]]);_6d5‍.w("../services/userService",[["saveUser",["saveUser"],function(v){saveUser=v}],["getAllUsers",["getAllUsers"],function(v){getAllUsers=v}],["update",["update"],function(v){update=v}],["deleteById",["deleteById"],function(v){deleteById=v}]]);_6d5‍.w("../models/view-models",[["validators",["validators"],function(v){validators=v}]]);_6d5‍.w("../middlewares/indez",[["handleValidation",["handleValidation"],function(v){handleValidation=v}]]);





const router = express.Router()
const getHandler = async (req, res, next) => {
    try {
        const users = await getAllUsers();
        res.status(200).send(users);
    }
    catch {
        return next(error, req, res);

    }

}
const postHandler = async (req, res, next) => {
    try {
        const body = req.body;
        const user = await saveUser(body);
        res.status(201).send(user._id);
    }
    catch(error) {
        _6d5‍.g.console.log(error,req,res)

        return next(error, req, res);

    }


};
const putHandler = async (req, res, next) => {
    try {
        const body = req.body;
        const user = await update(body);
        res.status(200).send(user._id);
    }
    catch(error) {
        return next(error, req, res);

    }
}

const deleteHandler = async (req, res, next) => {
    try {

        const id = req.params.id;
        await deleteById(id);
        res.status(200).send("User deleted");

    }
    catch (error) {
        return next(error, req, res);

    }
}

router.get('/', getHandler);
router.post('/',handleValidation(validators.userSchemaValidate), postHandler);
router.put('/', putHandler);
router.delete('/:id', deleteHandler);

const configure = (app) => {
    app.use('/users', router);
}
_6d5‍.d(configure);