let express,models,saveUser,getAllUsers,update,deleteById;_cd5‍.x([["default",()=>_cd5‍.o]]);_cd5‍.w("express",[["default",["express"],function(v){express=v}]]);_cd5‍.w("../models",[["default",["models"],function(v){models=v}]]);_cd5‍.w("../services/userService",[["saveUser",["saveUser"],function(v){saveUser=v}],["getAllUsers",["getAllUsers"],function(v){getAllUsers=v}],["update",["update"],function(v){update=v}],["deleteById",["deleteById"],function(v){deleteById=v}]]);



const router = express.Router()
const getHandler = async (req, res) => {
    // const query = JSON.stringify(req.query);
    // res.send("testing get " + query)
    const users = await getAllUsers();
    res.status(200).send(users);
}
const postHandler = async (req, res) => {
    const body = req.body;
    const user = await saveUser(body);
    res.status(201).send(user._id);

};
const putHandler = async (req, res) => {
    const body = req.body;
    const user = await update(body);
    res.status(200).send(user._id);
}

const deleteHandler = async (req, res, next) => {
    try {
        const id = req.params.id;
        const result = await deleteById(id);
        if (result instanceof Error) {
            return next(result,req,res);
        }
        else {
            res.status(200).send("User deleted");

        }
    }
    catch (error) {
        return next(error,req,res);

    }
}

router.get('/', getHandler);
router.post('/', postHandler);
router.put('/', putHandler);
router.delete('/:id', deleteHandler);

const configure = (app) => {
    app.use('/users', router);
}
_cd5‍.d(configure);