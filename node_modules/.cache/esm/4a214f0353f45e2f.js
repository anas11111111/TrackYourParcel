let express,configure,handleErrors,connectWithDb,winston,expressWinston,winstonFile,winstonMongo,ElasticsearchTransport;_53f‍.w("express",[["default",["express"],function(v){express=v}]]);_53f‍.w("./controllers/index",[["default",["configure"],function(v){configure=v}]]);_53f‍.w("./middlewares/handleErrors",[["handleErrors",["handleErrors"],function(v){handleErrors=v}]]);_53f‍.w("./mongo",[["default",["connectWithDb"],function(v){connectWithDb=v}]]);_53f‍.w("winston",[["default",["winston"],function(v){winston=v}]]);_53f‍.w("express-winston",[["default",["expressWinston"],function(v){expressWinston=v}]]);_53f‍.w("winston-daily-rotate-file",[["default",["winstonFile"],function(v){winstonFile=v}]]);_53f‍.w("winston-mongodb",[["default",["winstonMongo"],function(v){winstonMongo=v}]]);_53f‍.w("winston-elasticsearch",[["ElasticsearchTransport",["ElasticsearchTransport"],function(v){ElasticsearchTransport=v}]]);








const app = express();
app.use(express.json());

const port = 3000;

const processRequest = async (req, res, next) => {
    let correlationId = req.headers['x-correlation-id'];
    if (!correlationId) {
        correlationId = Date.now().toString();
        req.headers['x-correlation-id'] = correlationId;
    }
    res.set('x-correlation-id', correlationId);
    return next();
}
app.use(processRequest)
connectWithDb();
const getMessage = (req,res)

const infoLogger = expressWinston.logger({
    transports: [
        new winston.transports.Console()
    ],
    format: winston.format.combine(winston.format.colorize(), winston.format.json()),
    meta: true,
    msg: 'this is a log {{req.method}}'
})
app.use(infoLogger);

configure(app)
app.use(handleErrors)
app.listen(port, () => {
    _53f‍.g.console.log("listening to port no:" + port)
})
//log(models);
//Doing up and running express server
//configure the express server
//handle the routes of the server


//use directory import
//use async await function
//separation of violation
/*three layer architecture 
    --controller layer: process the http requests[userController]
    --service layer : process the object and send to data layer[userService]
    --data layer : process the data and get / set it to database [mongoose raper]
*/
